Here's a test for the future merge of master and knowledge.										 

I have initialized this repository using git init

You can tell whether a repository has been initialized in any
directory by typing ls -a and searching for a .git file

Once I initialize a repository I can check the commit history using
git log. If I do this I'll get the output

			fatal: bad default revision 'HEAD'

HEAD is git's word for the current commit so git is basically telling
me that I have no commits. I can check this by typing git status which
returns the files that have changed since the last commit. Right now
its prints out 
	
			On branch master

			Initial commit

So clearly the only commit has been the initalization of the git.
Git status is also outputing the message 

		Changes to be committed:
		  (use "git rm --cached <file>..." to unstage)

			new file:   file1.txt

The message is saying that I have added a file, 'file1.txt' to the staging area to be committed. This message is followed by another message.

		Changes not staged for commit:
		  (use "git add <file>..." to update what will be committed)
		  (use "git checkout -- <file>..." to discard changes in working directory)

			modified:   file1.txt

This message is stating that I have modified the file, 'file1.txt' since 
adding it to the staging area. It is warning me that if I checkout 
another branch my changes will be lost. If I add it to the next commit 
then my changes will be saved. 

As a test I'm going to see what happens if I commit the new file and 
type git status. Then I'll see what happens if I make changes to it.
If all goes as expected, the git status will initially output the 
message. "Changes to be committed" followed by the file name, and
will not output the message "Changes not staged for commit"

So it all went expected so far. Here is the output of git status after
adding the changes in file1.txt to the staging area. 

				On branch master

				Initial commit

				Changes to be committed:
				  (use "git rm --cached <file>..." to unstage)

					new file:   file1.txt

Now if I type in git status I should get the errors. And yes I do. 
Here they are

			Changes not staged for commit:
			  (use "git add <file>..." to update what will be committed)
			  (use "git checkout -- <file>..." to discard changes in working directory)

				modified:   file1.txt

Onwards. Now if I create a file called untrackedfile.txt and do not
add it to the staging area, then it is not considered a part of my 
git repository as far as I can tell. When I type in git status 
I now get the message

		Untracked files:
		  (use "git add <file>..." to include in what will be committed)

			untrackedfile.txt

Now I can start messing with the staging area. The staging area is where
you put files that are going to be committed but haven't been committed
yet. You can add files to the staging area using git add <file>, 
and remove them using git reset <file> or git rm --cached <file>.
PRO TIP: using git add ./ to add all the files in the directory
to the staging area.

Now I can go ahead and commit my file1.txt. If I do, then git log will
show me what files I have committed.

Now it's time to start examining changes. 

Changes can be found using git diff. git diff takes commits as arguments
and will show the difference between two commits in the repository. 

Git diff with no arguments will compare the working directory to the
repository.

Git diff --staged will compare the staging area to the repository.

You can see all this on the command line. If the (master ) tag is showing
a (master +) sign, then the staging area is ahead of the repository. 
If the master is showing a (master *) then there are changes in the local
directory that have not been added to the staging area.

Now I am going to continue this file on the branch knowledge. Later I may try to merge the two branches. We'll see what happens on this line.

If the master is showing (master *+) then the * is representing a change
between the local directory and the staging area and the + represents a 
change between the staging area and the repository.

Now on to branches. Branches are basically splits in your projects file
history. I'm going to try initializing a branch called knowledge. 
Hopefully I will be able to play with what appears in each branch.

Here is a statement that should only appear in the knowledge branch.
Turns out more than just this statement appear on the knowledge branch.
Basically anything I didn't commit to the master branch before checking
out the knowledge branch, will not be seen on the master branch. 

However, when I check out branches, it only affects files that are in 
that branch. Lets say I add a file to knowledge. I wonder what will
happen when I switch back to the master branch.

Alright so I performed a small experiment just now to see what would 
happen. When I created a file trackedbyknowledge.txt then added
and committed it to the knowledge branch, it no longer showed up
when I switched to the master branch. However, when I created a file
createdinknowledgebutnottracked.txt the file did show up in my master
branch. This leads me to believe that any file that is both in my
local directory and part of a git repository, is going to be considered
part of that git repository first, and in my local directory second.
However, if something is in my local directory and is not part of the
repository, it will be unaffected by git. This is all good so far. 

Now just to be a hardo, lets see what would happen if I create a file in
knowledge and add it to staging. then switch to master and switch back 
to knowledge. 

This is interesting. So the staging area carries over between branches.
Therefore the staging area acts like a data buffer, and can hold data 
even if I'm switching between branches.

Lets see if this actually works. I'm going to add the paragraphs I just wrote to staging and then see what happens to them when I switch to master.

Apparently my changes to file1.txt would be overwritten by checking
out to master. Could this be a merge conflict issue? I'm gonna
go back to udacity and find out.

Now I'm going to try merging knowledge into master. lets see what happens
. Holy shit I just realized that sublime uses autocomplete on english
words. This is absurd.



